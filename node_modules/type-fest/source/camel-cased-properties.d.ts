<<<<<<< HEAD
import type {CamelCase, CamelCaseOptions} from './camel-case';
=======
import type {CamelCase, CamelCaseOptions, DefaultCamelCaseOptions} from './camel-case';
import type {ApplyDefaultOptions} from './internal';
>>>>>>> temporary

/**
Convert object properties to camel case but not recursively.

This can be useful when, for example, converting some API types from a different style.

@see CamelCasedPropertiesDeep
@see CamelCase

@example
```
import type {CamelCasedProperties} from 'type-fest';

interface User {
	UserId: number;
	UserName: string;
}

const result: CamelCasedProperties<User> = {
	userId: 1,
	userName: 'Tom',
};
<<<<<<< HEAD
=======

const preserveConsecutiveUppercase: CamelCasedProperties<{fooBAR: string}, {preserveConsecutiveUppercase: false}> = {
	fooBar: 'string',
};
>>>>>>> temporary
```

@category Change case
@category Template literal
@category Object
*/
<<<<<<< HEAD
export type CamelCasedProperties<Value, Options extends CamelCaseOptions = {preserveConsecutiveUppercase: true}> = Value extends Function
=======
export type CamelCasedProperties<Value, Options extends CamelCaseOptions = {}> = Value extends Function
>>>>>>> temporary
	? Value
	: Value extends Array<infer U>
		? Value
		: {
<<<<<<< HEAD
			[K in keyof Value as CamelCase<K, Options>]: Value[K];
=======
			[K in keyof Value as
			CamelCase<K, ApplyDefaultOptions<CamelCaseOptions, DefaultCamelCaseOptions, Options>>
			]: Value[K];
>>>>>>> temporary
		};
